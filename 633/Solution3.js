/**
 * @param {number} c
 * @return {boolean}
 */
var judgeSquareSum = function (c) {
  /**
   * 如下是费马平方和定理:
   * 一个非负整数 c 能够表示为两个整数的平方和，
   * 当且仅当 c 的所有形如 4k+3 的质因子的幂次均为偶数。
   *
   * 360 = 2 * 2 * 2 * 3 * 3 * 5 = 2^3 + 3^2 + 5
   * 质因子分别为2,3,5 对应的幂次分别为3 2 1
   *
   * 因此思路就是去寻找c的所有因子, 然后如果找到形如4k+3的质因子, 判断其幂次
   */
  if (c < 0) return false;

  // 质因子从2开始
  for (let i = 2; i ** 2 <= c; i++) {
    // 记录幂次 也就是包含该质因子的个数
    let count = 0;

    // 如果能整除i 说明i是其一个因子
    if (c % i === 0) {
      // 循环
      while (c % i === 0) {
        // 幂次+1
        count++;
        c /= i;
      }

      // i% 4 == 3 表示 i是一个形如4k + 3的因子
      // 如果其幂次不是偶数的话 那么直接返回false
      if (i % 4 === 3 && count % 2 != 0) {
        return false;
      }
    }
  }

  /**
   * 循环到最后,
   * 因为它一直在除去质因子，所以最后会剩下1或者一个大于sqrt(c)的因子（可能是自身，可能不是）。
   * 比如c=4剩下的是1；
   * c=7，剩下的是7；
   * c=14，剩下的是7。
   * 验证的是这个大于sqrt(c)的因子
   * 显然这个因子只可能出现一次，所以只需要验证它是不是4k+3的形式
   */
  return c % 4 != 3;
};
